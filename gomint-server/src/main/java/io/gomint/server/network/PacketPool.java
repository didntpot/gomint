package io.gomint.server.network;

import io.gomint.server.network.packet.*;

import javax.annotation.Nullable;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

public class PacketPool {

    private static final Map<Integer, Class<? extends Packet>> POOL = new HashMap<>();

    static {
        registerPacket(Protocol.PACKET_LOGIN, PacketLogin.class);
        registerPacket(Protocol.PACKET_PLAY_STATE, PacketPlayState.class);
        registerPacket(Protocol.PACKET_DISCONNECT, PacketDisconnect.class);
        registerPacket(Protocol.PACKET_RESOURCEPACK_INFO, PacketResourcePacksInfo.class);
        registerPacket(Protocol.PACKET_RESOURCEPACK_STACK, PacketResourcePackStack.class);
        registerPacket(Protocol.PACKET_RESOURCEPACK_RESPONSE, PacketResourcePackResponse.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_DATA_INFO, PacketResourcePackDataInfo.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_CHUNK_DATA, PacketResourcePackChunkData.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_CHUNK_REQUEST, PacketResourcePackChunkRequest.class);
        registerPacket(Protocol.PACKET_TEXT, PacketText.class);
        registerPacket(Protocol.PACKET_WORLD_TIME, PacketWorldTime.class);
        registerPacket(Protocol.PACKET_START_GAME, PacketStartGame.class);
        registerPacket(Protocol.PACKET_SPAWN_PLAYER, PacketSpawnPlayer.class);
        registerPacket(Protocol.PACKET_SPAWN_ENTITY, PacketSpawnEntity.class);
        registerPacket(Protocol.PACKET_DESPAWN_ENTITY, PacketDespawnEntity.class);
        registerPacket(Protocol.PACKET_ADD_ITEM_ENTITY, PacketAddItemEntity.class);
        registerPacket(Protocol.PACKET_PICKUP_ITEM_ENTITY, PacketPickupItemEntity.class);
        registerPacket(Protocol.PACKET_ENTITY_MOVEMENT, PacketEntityAbsoluteMovement.class);
        registerPacket(Protocol.PACKET_MOVE_PLAYER, PacketMovePlayer.class);
        registerPacket(Protocol.PACKET_RIDER_JUMP, PacketRiderJump.class);
        registerPacket(Protocol.PACKET_UPDATE_BLOCK, PacketUpdateBlock.class);
        registerPacket(Protocol.PACKET_ADD_PAINTING, PacketAddPainting.class);
        registerPacket(Protocol.PACKET_TICK_SYNC, PacketTickSync.class);
        registerPacket(Protocol.PACKET_WORLD_SOUND_EVENT_V1, PacketWorldSoundEvent.class);
        registerPacket(Protocol.PACKET_WORLD_EVENT, PacketWorldEvent.class);
        registerPacket(Protocol.PACKET_BLOCK_EVENT, PacketBlockEvent.class);
        registerPacket(Protocol.PACKET_ENTITY_EVENT, PacketEntityEvent.class);
        registerPacket(Protocol.PACKET_MOB_EFFECT, PacketMobEffect.class);
        registerPacket(Protocol.PACKET_UPDATE_ATTRIBUTES, PacketUpdateAttributes.class);
        registerPacket(Protocol.PACKET_INVENTORY_TRANSACTION, PacketInventoryTransaction.class);
        registerPacket(Protocol.PACKET_MOB_EQUIPMENT, PacketMobEquipment.class);
        registerPacket(Protocol.PACKET_MOB_ARMOR_EQUIPMENT, PacketMobArmorEquipment.class);
        registerPacket(Protocol.PACKET_INTERACT, PacketInteract.class);
        registerPacket(Protocol.PACKET_BLOCK_PICK_REQUEST, PacketBlockPickRequest.class);
        registerPacket(Protocol.PACKET_PLAYER_ACTION, PacketPlayerAction.class);
        registerPacket(Protocol.PACKET_ENTITY_FALL, PacketEntityFall.class);
        registerPacket(Protocol.PACKET_HURT_ARMOR, PacketHurtArmor.class);
        registerPacket(Protocol.PACKET_ENTITY_METADATA, PacketEntityMetadata.class);
        registerPacket(Protocol.PACKET_ENTITY_MOTION, PacketEntityMotion.class);
//        registerPacket(Protocol.PACKET_SET_ENTITY_LINK, PacketSetEntityLink.class);
//        registerPacket(Protocol.PACKET_SET_HEALTH, PacketSetHealth.class);
        registerPacket(Protocol.PACKET_SET_SPAWN_POSITION, PacketSetSpawnPosition.class);
        registerPacket(Protocol.PACKET_ANIMATE, PacketAnimate.class);
        registerPacket(Protocol.PACKET_RESPAWN_POSITION, PacketRespawnPosition.class);
        registerPacket(Protocol.PACKET_CONTAINER_OPEN, PacketContainerOpen.class);
        registerPacket(Protocol.PACKET_CONTAINER_CLOSE, PacketContainerClose.class);
        registerPacket(Protocol.PACKET_HOTBAR, PacketHotbar.class);
        registerPacket(Protocol.PACKET_INVENTORY_CONTENT_PACKET, PacketInventoryContent.class);
        registerPacket(Protocol.PACKET_INVENTORY_SET_SLOT, PacketInventorySetSlot.class);
        registerPacket(Protocol.PACKET_SET_CONTAINER_DATA, PacketSetContainerData.class);
        registerPacket(Protocol.PACKET_CRAFTING_RECIPES, PacketCraftingRecipes.class);
        registerPacket(Protocol.PACKET_CRAFTING_EVENT, PacketCraftingEvent.class);
//        registerPacket(Protocol.PACKET_GUI_DATA_PICK_ITEM, PacketGuiDataPickItem.class);
//        registerPacket(Protocol.PACKET_ADVENTURE_SETTINGS, PacketAdventureSettings.class);
        registerPacket(Protocol.PACKET_TILE_ENTITY_DATA, PacketTileEntityData.class);
//        registerPacket(Protocol.PACKET_PLAYER_INPUT, PacketPlayerInput.class);
        registerPacket(Protocol.PACKET_WORLD_CHUNK, PacketWorldChunk.class);
        registerPacket(Protocol.PACKET_SET_COMMANDS_ENABLED, PacketSetCommandsEnabled.class);
        registerPacket(Protocol.PACKET_SET_DIFFICULTY, PacketSetDifficulty.class);
//        registerPacket(Protocol.PACKET_CHANGE_DIMENSION, PacketChangeDimension.class);
        registerPacket(Protocol.PACKET_SET_GAMEMODE, PacketSetGamemode.class);
        registerPacket(Protocol.PACKET_PLAYER_LIST, PacketPlayerList.class);
//        registerPacket(Protocol.PACKET_EVENT, PacketEvent.class);
//        registerPacket(Protocol.PACKET_SPAWN_EXPERIENCE_ORB, PacketSpawnExperienceOrb.class);
//        registerPacket(Protocol.PACKET_CLIENTBOUND_MAP_ITEM_DATA, PacketClientboundMapItemData.class);
//        registerPacket(Protocol.PACKET_MAP_INFO_REQUEST, PacketMapInfoRequest.class);
        registerPacket(Protocol.PACKET_REQUEST_CHUNK_RADIUS, PacketRequestChunkRadius.class);
        registerPacket(Protocol.PACKET_CONFIRM_CHUNK_RADIUS, PacketConfirmChunkRadius.class);
//        registerPacket(Protocol.PACKET_ITEM_FRAME_DROP_ITEM, PacketItemFrameDropItem.class);
//        registerPacket(Protocol.PACKET_GAME_RULES_CHANGED, PacketGameRulesChanged.class);
//        registerPacket(Protocol.PACKET_CAMERA, PacketCamera.class);
        registerPacket(Protocol.PACKET_BOSS_BAR, PacketBossBar.class);
//        registerPacket(Protocol.PACKET_SHOW_CREDITS, PacketShowCredits.class);
        registerPacket(Protocol.PACKET_AVAILABLE_COMMANDS, PacketAvailableCommands.class);
        registerPacket(Protocol.PACKET_COMMAND_REQUEST, PacketCommandRequest.class);
//        registerPacket(Protocol.PACKET_COMMAND_BLOCK_UPDATE, PacketCommandBlockUpdate.class);
        registerPacket(Protocol.PACKET_COMMAND_OUTPUT, PacketCommandOutput.class);
//        registerPacket(Protocol.PACKET_UPDATE_TRADE, PacketUpdateTrade.class);
//        registerPacket(Protocol.PACKET_UPDATE_EQUIPMENT, PacketUpdateEquipment.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_DATA_INFO, PacketResourcePackDataInfo.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_CHUNK_DATA, PacketResourcePackChunkData.class);
//        registerPacket(Protocol.PACKET_RESOURCE_PACK_CHUNK_REQUEST, PacketResourcePackChunkRequest.class);
        registerPacket(Protocol.PACKET_TRANSFER, PacketTransfer.class);
//        registerPacket(Protocol.PACKET_PLAY_SOUND, PacketPlaySound.class);
//        registerPacket(Protocol.PACKET_STOP_SOUND, PacketStopSound.class);
        registerPacket(Protocol.PACKET_SET_TITLE, PacketSetTitle.class);
//        registerPacket(Protocol.PACKET_ADD_BEHAVIOR_TREE, PacketAddBehaviorTree.class);
//        registerPacket(Protocol.PACKET_STRUCTURE_BLOCK_UPDATE, PacketStructureBlockUpdate.class);
//        registerPacket(Protocol.PACKET_SHOW_STORE_OFFER, PacketShowStoreOffer.class);
//        registerPacket(Protocol.PACKET_PURCHASE_RECEIPT, PacketPurchaseReceipt.class);
//        registerPacket(Protocol.PACKET_PLAYER_SKIN, PacketPlayerSkin.class);
//        registerPacket(Protocol.PACKET_SUB_CLIENT_LOGIN, PacketSubClientLogin.class);
//        registerPacket(Protocol.PACKET_AUTOMATION_CLIENT_CONNECT, PacketAutomationClientConnect.class);
//        registerPacket(Protocol.PACKET_SET_LAST_HURT_BY, PacketSetLastHurtBy.class);
        registerPacket(Protocol.PACKET_BOOK_EDIT, PacketBookEdit.class);
//        registerPacket(Protocol.PACKET_NPC_REQUEST, PacketNpcRequest.class);
//        registerPacket(Protocol.PACKET_PHOTO_TRANSFER, PacketPhotoTransfer.class);
        registerPacket(Protocol.PACKET_MODAL_REQUEST, PacketModalRequest.class);
        registerPacket(Protocol.PACKET_MODAL_RESPONSE, PacketModalResponse.class);
        registerPacket(Protocol.PACKET_SERVER_SETTINGS_REQUEST, PacketServerSettingsRequest.class);
        registerPacket(Protocol.PACKET_SERVER_SETTINGS_RESPONSE, PacketServerSettingsResponse.class);
//        registerPacket(Protocol.PACKET_SHOW_PROFILE, PacketShowProfile.class);
//        registerPacket(Protocol.PACKET_SET_DEFAULT_GAME_TYPE, PacketSetDefaultGameType.class);
        registerPacket(Protocol.PACKET_REMOVE_OBJECTIVE, PacketRemoveObjective.class);
        registerPacket(Protocol.PACKET_SET_OBJECTIVE, PacketSetObjective.class);
        registerPacket(Protocol.PACKET_SET_SCORE, PacketSetScore.class);
//        registerPacket(Protocol.PACKET_LAB_TABLE, PacketLabTable.class);
        registerPacket(Protocol.PACKET_UPDATE_BLOCK_SYNCHED, PacketUpdateBlockSynched.class);
        registerPacket(Protocol.PACKET_ENTITY_RELATIVE_MOVEMENT, PacketEntityRelativeMovement.class);
        registerPacket(Protocol.PACKET_SET_SCOREBOARD_IDENTITY, PacketSetScoreboardIdentity.class);
//        registerPacket(Protocol.PACKET_SET_LOCAL_PLAYER_INITIALIZED, PacketSetLocalPlayerInitialized.class);
//        registerPacket(Protocol.PACKET_UPDATE_SOFT_ENUM, PacketUpdateSoftEnum.class);
//        registerPacket(Protocol.PACKET_NETWORK_STACK_LATENCY, PacketNetworkStackLatency.class);
//        registerPacket(Protocol.PACKET_SCRIPT_CUSTOM_EVENT, PacketScriptCustomEvent.class);
//        registerPacket(Protocol.PACKET_SPAWN_PARTICLE_EFFECT, PacketSpawnParticleEffect.class);
        registerPacket(Protocol.PACKET_AVAILABLE_ENTITY_IDENTIFIERS, PacketAvailableEntityIdentifiers.class);
//        registerPacket(Protocol.PACKET_WORLD_SOUND_EVENT_V2, PacketWorldSoundEventV2.class);
        registerPacket(Protocol.PACKET_NETWORK_CHUNK_PUBLISHER_UPDATE, PacketNetworkChunkPublisherUpdate.class);
        registerPacket(Protocol.PACKET_BIOME_DEFINITION_LIST, PacketBiomeDefinitionList.class);
        registerPacket(Protocol.PACKET_WORLD_SOUND_EVENT, PacketWorldSoundEvent.class);
//        registerPacket(Protocol.PACKET_WORLD_EVENT_GENERIC, PacketWorldEventGeneric.class);
//        registerPacket(Protocol.PACKET_LECTERN_UPDATE, PacketLecternUpdate.class);
//        registerPacket(Protocol.PACKET_VIDEO_STREAM_CONNECT, PacketVideoStreamConnect.class);
//        registerPacket(Protocol.PACKET_ADD_ENTITY, PacketAddEntity.class);
//        registerPacket(Protocol.PACKET_REMOVE_ENTITY, PacketRemoveEntity.class);
//        registerPacket(Protocol.PACKET_CLIENT_CACHE_STATUS, PacketClientCacheStatus.class);
//        registerPacket(Protocol.PACKET_ON_SCREEN_TEXTURE_ANIMATION, PacketOnScreenTextureAnimation.class);
//        registerPacket(Protocol.PACKET_MAP_CREATE_LOCKED_COPY, PacketMapCreateLockedCopy.class);
//        registerPacket(Protocol.PACKET_STRUCTURE_TEMPLATE_DATA_REQUEST, PacketStructureTemplateDataRequest.class);
//        registerPacket(Protocol.PACKET_STRUCTURE_TEMPLATE_DATA_RESPONSE, PacketStructureTemplateDataResponse.class);
//        registerPacket(Protocol.PACKET_UPDATE_BLOCK_PROPERTIES, PacketUpdateBlockProperties.class);
        registerPacket(Protocol.PACKET_CLIENT_CACHE_BLOB_STATUS, PacketClientCacheBlobStatus.class);
        registerPacket(Protocol.PACKET_CLIENT_CACHE_MISS_RESPONSE, PacketClientCacheMissResponse.class);
//        registerPacket(Protocol.PACKET_EDUCATION_SETTINGS, PacketEducationSettings.class);
//        registerPacket(Protocol.PACKET_EMOTE, PacketEmote.class);
//        registerPacket(Protocol.PACKET_MULTIPLAYER_SETTINGS, PacketMultiplayerSettings.class);
//        registerPacket(Protocol.PACKET_SETTINGS_COMMAND, PacketSettingsCommand.class);
//        registerPacket(Protocol.PACKET_ANVIL_DAMAGE, PacketAnvilDamage.class);
//        registerPacket(Protocol.PACKET_COMPLETED_USING_ITEM, PacketCompletedUsingItem.class);
        registerPacket(Protocol.PACKET_NETWORK_SETTINGS, PacketNetworkSettings.class);
//        registerPacket(Protocol.PACKET_PLAYER_AUTH_INPUT, PacketPlayerAuthInput.class);
        registerPacket(Protocol.PACKET_CREATIVE_CONTENT, PacketCreativeContent.class);
//        registerPacket(Protocol.PACKET_PLAYER_ENCHANT_OPTIONS, PacketPlayerEnchantOptions.class);
        registerPacket(Protocol.PACKET_ITEM_STACK_REQUEST, PacketItemStackRequest.class);
        registerPacket(Protocol.PACKET_ITEM_STACK_RESPONSE, PacketItemStackResponse.class);
//        registerPacket(Protocol.PACKET_PLAYER_ARMOR_DAMAGE, PacketPlayerArmorDamage.class);
//        registerPacket(Protocol.PACKET_CODE_BUILDER, PacketCodeBuilder.class);
//        registerPacket(Protocol.PACKET_UPDATE_PLAYER_GAME_TYPE, PacketUpdatePlayerGameType.class);
        registerPacket(Protocol.PACKET_EMOTE_LIST, PacketEmoteList.class);
//        registerPacket(Protocol.PACKET_POS_TRACKING_SERVER_BROADCAST, PacketPosTrackingServerBroadcast.class);
//        registerPacket(Protocol.PACKET_POS_TRACKING_CLIENT_REQUEST, PacketPosTrackingClientRequest.class);
//        registerPacket(Protocol.PACKET_DEBUG_INFO, PacketDebugInfo.class);
        registerPacket(Protocol.PACKET_VIOLATION_WARNING, PacketViolationWarning.class);
        registerPacket(Protocol.PACKET_ITEM_COMPONENT, PacketItemComponent.class);
//        registerPacket(Protocol.PACKET_FILTER_TEXT, PacketFilterText.class);
//        registerPacket(Protocol.PACKET_CLIENTBOUND_DEBUG_RENDERER, PacketClientboundDebugRenderer.class);
//        registerPacket(Protocol.PACKET_SYNC_ENTITY_PROPERTY, PacketSyncEntityProperty.class);
//        registerPacket(Protocol.PACKET_ADD_VOLUME_ENTITY, PacketAddVolumeEntity.class);
//        registerPacket(Protocol.PACKET_REMOVE_VOLUME_ENTITY, PacketRemoveVolumeEntity.class);
//        registerPacket(Protocol.PACKET_SIMULATION_TYPE, PacketSimulationType.class);
//        registerPacket(Protocol.PACKET_NPC_DIALOGUE, PacketNpcDialogue.class);
//        registerPacket(Protocol.PACKET_EDU_URI_RESOURCE, PacketEduUriResource.class);
//        registerPacket(Protocol.PACKET_CREATE_PHOTO, PacketCreatePhoto.class);
//        registerPacket(Protocol.PACKET_UPDATE_SUB_CHUNK_BLOCKS, PacketUpdateSubChunkBlocks.class);
//        registerPacket(Protocol.PACKET_SUB_CHUNK, PacketSubChunk.class);
//        registerPacket(Protocol.PACKET_SUB_CHUNK_REQUEST, PacketSubChunkRequest.class);
//        registerPacket(Protocol.PACKET_PLAYER_START_ITEM_COOLDOWN, PacketPlayerStartItemCooldown.class);
//        registerPacket(Protocol.PACKET_SCRIPT_MESSAGE, PacketScriptMessage.class);
//        registerPacket(Protocol.PACKET_CODE_BUILDER_SOURCE, PacketCodeBuilderSource.class);
//        registerPacket(Protocol.PACKET_TICKING_AREAS_LOAD_STATUS, PacketTickingAreasLoadStatus.class);
//        registerPacket(Protocol.PACKET_DIMENSION_DATA, PacketDimensionData.class);
//        registerPacket(Protocol.PACKET_AGENT_ACTION_EVENT, PacketAgentActionEvent.class);
//        registerPacket(Protocol.PACKET_CHANGE_MOB_PROPERTY, PacketChangeMobProperty.class);
//        registerPacket(Protocol.PACKET_LESSON_PROGRESS, PacketLessonProgress.class);
//        registerPacket(Protocol.PACKET_REQUEST_ABILITY, PacketRequestAbility.class);
//        registerPacket(Protocol.PACKET_REQUEST_PERMISSIONS, PacketRequestPermissions.class);
//        registerPacket(Protocol.PACKET_TOAST_REQUEST, PacketToastRequest.class);
        registerPacket(Protocol.PACKET_UPDATE_ABILITIES, PacketUpdateAbilities.class);
//        registerPacket(Protocol.PACKET_UPDATE_ADVENTURE_SETTINGS, PacketUpdateAdventureSettings.class);
//        registerPacket(Protocol.PACKET_DEATH_INFO, PacketDeathInfo.class);
//        registerPacket(Protocol.PACKET_EDITOR_NETWORK, PacketEditorNetwork.class);
//        registerPacket(Protocol.PACKET_FEATURE_REGISTRY, PacketFeatureRegistry.class);
//        registerPacket(Protocol.PACKET_SERVER_STATS, PacketServerStats.class);
        registerPacket(Protocol.PACKET_REQUEST_NETWORK_SETTINGS, PacketRequestNetworkSettings.class);
//        registerPacket(Protocol.PACKET_GAME_TEST_REQUEST, PacketGameTestRequest.class);
//        registerPacket(Protocol.PACKET_GAME_TEST_RESULTS, PacketGameTestResults.class);
//        registerPacket(Protocol.PACKET_UPDATE_CLIENT_INPUT_LOCKS, PacketUpdateClientInputLocks.class);
//        registerPacket(Protocol.PACKET_CAMERA_PRESETS, PacketCameraPresets.class);
//        registerPacket(Protocol.PACKET_UNLOCKED_RECIPES, PacketUnlockedRecipes.class);
//        registerPacket(Protocol.PACKET_CAMERA_INSTRUCTION, PacketCameraInstruction.class);
//        registerPacket(Protocol.PACKET_COMPRESSED_BIOME_DEFINITION_LIST, PacketCompressedBiomeDefinitionList.class);
//        registerPacket(Protocol.PACKET_TRIM_DATA, PacketTrimData.class);
//        registerPacket(Protocol.PACKET_OPEN_SIGN, PacketOpenSign.class);
//        registerPacket(Protocol.PACKET_AGENT_ANIMATION, PacketAgentAnimation.class);
    }

    public static void registerPacket(int id, Class<? extends Packet> clazz) {
        POOL.put(id, clazz);
    }

    public static @Nullable Packet getPacket(int id) {
        Class<? extends Packet> clazz = POOL.get(id);
        if (clazz == null) {
            return new PacketSkipable();
        }
        try {
            return clazz.getDeclaredConstructor().newInstance();
        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException |
                 InvocationTargetException e) {
            throw new RuntimeException("Failed to create packet instance", e);
        }
    }
}
